<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://danyalette.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://danyalette.com/" rel="alternate" type="text/html" /><updated>2017-06-16T00:59:19-04:00</updated><id>https://danyalette.com/</id><title type="html">Danya Lette</title><subtitle>Hi, I'm Danya Lette, a software developer living and working in Toronto. I love learning and building cool stuff.
</subtitle><entry><title type="html">Migrating From Wordpress To Jekyll</title><link href="https://danyalette.com/blog/migrating-from-wordpress-to-jekyll" rel="alternate" type="text/html" title="Migrating From Wordpress To Jekyll" /><published>2017-06-15T21:46:00-04:00</published><updated>2017-06-15T21:46:00-04:00</updated><id>https://danyalette.com/blog/migrating-from-wordpress-to-jekyll</id><content type="html" xml:base="https://danyalette.com/blog/migrating-from-wordpress-to-jekyll">&lt;p&gt;When migrating from Wordpress to Jekyll, an obvious first step is exporting your data from Wordpress. Fortunately, there is a Wordpress plugin for that. Unfortunately, some features that we take for granted in Worpress (such as featured images, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; tag) are not supported out-the-box by Jekyll and may require some extra fiddling.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-jekyll&quot; id=&quot;markdown-toc-getting-started-with-jekyll&quot;&gt;Getting Started With Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#export-your-data-from-wordpress&quot; id=&quot;markdown-toc-export-your-data-from-wordpress&quot;&gt;Export Your Data From Wordpress&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pages-and-posts&quot; id=&quot;markdown-toc-pages-and-posts&quot;&gt;Pages and Posts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#config&quot; id=&quot;markdown-toc-config&quot;&gt;Config&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#uploads&quot; id=&quot;markdown-toc-uploads&quot;&gt;Uploads&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uris&quot; id=&quot;markdown-toc-uris&quot;&gt;URIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#missing-elements&quot; id=&quot;markdown-toc-missing-elements&quot;&gt;Missing Elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#permalinks&quot; id=&quot;markdown-toc-permalinks&quot;&gt;Permalinks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#read-more-tag&quot; id=&quot;markdown-toc-read-more-tag&quot;&gt;Read More Tag&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#static-homepage&quot; id=&quot;markdown-toc-static-homepage&quot;&gt;Static Homepage&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#create-blog-index&quot; id=&quot;markdown-toc-create-blog-index&quot;&gt;Create Blog Index&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#create-blog-layout&quot; id=&quot;markdown-toc-create-blog-layout&quot;&gt;Create Blog Layout&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#edit-home-layout&quot; id=&quot;markdown-toc-edit-home-layout&quot;&gt;Edit Home Layout&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#featured-images&quot; id=&quot;markdown-toc-featured-images&quot;&gt;Featured Images&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#add-data&quot; id=&quot;markdown-toc-add-data&quot;&gt;Add Data&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#display-image&quot; id=&quot;markdown-toc-display-image&quot;&gt;Display Image&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#full-base-urls&quot; id=&quot;markdown-toc-full-base-urls&quot;&gt;Full Base URLs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started-with-jekyll&quot;&gt;Getting Started With Jekyll&lt;/h2&gt;

&lt;p&gt;The obvious first step is getting yourself set up to develop a new Jekyll site. I strongly recommend taking a look at my guide, &lt;a href=&quot;/blog/getting-started-with-jekyll&quot;&gt;Getting Started With Jekyll&lt;/a&gt;.
Before moving forward in the Wordpress migration, you should choose a theme, and also familiarize yourself with the process of overriding theme templates - both of which are detailed in the guide - because, in subsequent steps, we will be overriding theme files.&lt;/p&gt;

&lt;h2 id=&quot;export-your-data-from-wordpress&quot;&gt;Export Your Data From Wordpress&lt;/h2&gt;

&lt;p&gt;Start by installing &lt;a href=&quot;https://github.com/benbalter/wordpress-to-jekyll-exporter&quot;&gt;this&lt;/a&gt; plugin into your Wordpress site, activate it, and then use it to create an export. Unzip the resulting archive.&lt;/p&gt;

&lt;h3 id=&quot;pages-and-posts&quot;&gt;Pages and Posts&lt;/h3&gt;

&lt;p&gt;If you look inside the unzipped archive, you’ll see that your pages and posts have been converted to markdown files, and these files have “front matter” i.e. Jekyll metadata.
Move the pages and posts into your Jekyll project directory. Pages go in the project root; posts go in &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;config&quot;&gt;Config&lt;/h3&gt;

&lt;p&gt;You may also want to update some values in your existing Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; with the values in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; generated by the Wordpress export.&lt;/p&gt;

&lt;h3 id=&quot;uploads&quot;&gt;Uploads&lt;/h3&gt;

&lt;p&gt;You’ll also want to grab your uploads directory. You could just plunk the whole &lt;code class=&quot;highlighter-rouge&quot;&gt;wp-content&lt;/code&gt; directory from your Wordpress export into the root of your Jekyll site. This will mean that, in your eventual live Jekyll blog, your uploads will have the same URLs they did in your Wordpress site.&lt;/p&gt;

&lt;p&gt;However, personally, I wanted to get rid of the traces of Wordpress, and use a directory structure that was more nuanced. So, I created &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/images/&lt;/code&gt; in my Jekyll project, and moved the &lt;code class=&quot;highlighter-rouge&quot;&gt;uploads/&lt;/code&gt; directory (which you can find inside the Wordpress export’s &lt;code class=&quot;highlighter-rouge&quot;&gt;wp-content/&lt;/code&gt; directory) into my new Jekyll project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/images/&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll-project
  -- assets
      -- images
        -- uploads
            -- 2015
            -- 2016
            -- 2017
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uris&quot;&gt;URIs&lt;/h2&gt;

&lt;p&gt;You might notice that your pages and posts refer to images and files using absolute URIs, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;https://my-former-blog.com/wp-content/uploads ...&lt;/code&gt;. If this is the case, you will need to edit those in order for you to be able to source images and files locally during development, and also in order to reflect any changes you made in the directory hierarchy of your uploads.&lt;/p&gt;

&lt;p&gt;In order to resolve this, you’ll have to do a global search and replace. If you made the same change as I did regarding the location of the uploads directory, then you’d be searching for for &lt;code class=&quot;highlighter-rouge&quot;&gt;https://my-former-blog.com/wp-content/uploads/&lt;/code&gt; and replacing it with &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets/images/uploads/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this stage, you might choose to get a bit fancier and use liquid template variables in order to automatically prepend the configured &lt;code class=&quot;highlighter-rouge&quot;&gt;site.url&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;site.baseurl&lt;/code&gt; to the paths. In this case, you’d be searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;https://my-former-blog.com/wp-content/uploads/&lt;/code&gt; and replacing with &lt;code class=&quot;highlighter-rouge&quot;&gt;https://danyalette.com/assets/images/uploads/&lt;/code&gt; or something along those lines.&lt;/p&gt;

&lt;h2 id=&quot;missing-elements&quot;&gt;Missing Elements&lt;/h2&gt;

&lt;p&gt;I found that certain HTML elements got stripped from posts during export, likely due to the conversion from HTML to markdown. Specifically, I noticed missing iframes and script tags. I am not aware of a way to fix this during export - I personally fixed these cases manually without too much trouble.&lt;/p&gt;

&lt;h2 id=&quot;permalinks&quot;&gt;Permalinks&lt;/h2&gt;

&lt;p&gt;Your exported posts will likely each have a permalink configured in the front matter (Jekyll metadata) of the post file. The permalink may make explicit reference to your former blog’s URI. Note that setting the permalink on individual posts overrides the global permalink settings. So, I recommend removing these from individual posts (with a global search and replace) and setting a global permalink structure in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.
Mine is&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/blog/:title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Note that, after editing &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, you will have to restart your development server.&lt;/p&gt;

&lt;p&gt;(Notice that I removed &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; from the end of the title. You might want to check &lt;a href=&quot;blog/getting-started-with-jekyll#permalinks&quot;&gt;this&lt;/a&gt; out, to support this permalink structure in production.)&lt;/p&gt;

&lt;p&gt;A little gotcha: Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;:title&lt;/code&gt; is actually the latter part of the post’s filename, and not the posts &lt;code class=&quot;highlighter-rouge&quot;&gt;title: &lt;/code&gt; as configured in its front matter.&lt;/p&gt;

&lt;h2 id=&quot;read-more-tag&quot;&gt;Read More Tag&lt;/h2&gt;

&lt;p&gt;I am a frequent user of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; tag. My automatically exported posts did retain these tags, but the template displaying my posts feed in my new Jekyll site did not, of course, limit itself to only displaying content before the more tag.&lt;/p&gt;

&lt;p&gt;If you’d like to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; tag working, the first thing you’ll have to do is find the template that is used to display post excerpts in the post feed.
To start, navigate to the directory that contains your current theme. My theme is &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss&lt;/code&gt;, so, to open the directory, I just do&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;bundle show jekyll-swiss&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I located the post feed in &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_layouts/home.html&lt;/code&gt;, where I found:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;post&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.posts&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, post excerpts should be in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;post_block.html&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; directory: &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_includes/post_block.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to override that file, make a copy of it in your Jekyll project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; directory. (If you don’t already have an &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; directory, create one.)&lt;/p&gt;

&lt;p&gt;Then, edit your &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/post_block.html&lt;/code&gt;. In my case, the post excerpt was being generated here on this line:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip_html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;truncatewords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, I replaced that with:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;!--more--&amp;gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&amp;lt;/p&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;!--more--&amp;gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;div class=&quot;more&quot;&amp;gt;
    &amp;lt;a href=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;Read More&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;static-homepage&quot;&gt;Static Homepage&lt;/h2&gt;

&lt;p&gt;You might decide that you don’t want your homepage to display a post feed.
If so, then you’ll need to override the current homepage, and create a new page to host the feed.&lt;/p&gt;

&lt;p&gt;The index file of your Jekyll site can be found in your project root, in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;.
It should contain something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jekyll&quot;&gt;---
# You don't need to edit this file, it's empty on purpose.
# Edit theme's home layout instead if you wanna make some changes
# See: https://jekyllrb.com/docs/themes/#overriding-theme-defaults
layout: home
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, in order to edit your site’s homepage, you should be editing the file that determines the layout called &lt;code class=&quot;highlighter-rouge&quot;&gt;home&lt;/code&gt;. This file should be in &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/home.html&lt;/code&gt; or something similar. If you don’t have the home layout file in your project, you will need to locate this file in your theme, copy it into your project, and edit in there, in order to override it this layout in the theme.
First up, find this file in your theme directory.
In my case, since my theme is called &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss&lt;/code&gt;, I navigated to my theme directory by doing&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;bundle show jekyll-swiss&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;From there, the home layout file should be in &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt;. Mine was in &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_layouts/home.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This file includes a loop that displays an excerpt of all posts, such as&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;post&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.posts&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want your homepage to be static, i.e. not to display a feed, then you’ll need to create a new layout for the feed and move that post loop there.
You’ll need to do three things:&lt;/p&gt;
&lt;h3 id=&quot;create-blog-index&quot;&gt;Create Blog Index&lt;/h3&gt;
&lt;p&gt;Create a file in the root of your project called &lt;code class=&quot;highlighter-rouge&quot;&gt;blog.md&lt;/code&gt;. It should contain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jekyll&quot;&gt;---
layout: blog
title: Blog
permalink: /blog/
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;create-blog-layout&quot;&gt;Create Blog Layout&lt;/h3&gt;
&lt;p&gt;Create a blog layout by creating the file &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/blog.html&lt;/code&gt;. You can put whatever you want in there, as long as it contains a loop that displays all posts. Mine looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jekyll&quot;&gt;---
layout: default
---
&amp;lt;article class=&quot;container mx-auto px-2 mt2 mb4&quot;&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h1 class=&quot;h0 py-4 mt-3&quot;&amp;gt;{{ page.title }}&amp;lt;/h1&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;div class=&quot;col-4 sm-width-full border-top-thin&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;prose mb-4 py-4&quot;&amp;gt;
    {% for post in site.posts %}
      {% include post_block.html %}
    {% endfor %}
  &amp;lt;/div&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;edit-home-layout&quot;&gt;Edit Home Layout&lt;/h3&gt;
&lt;p&gt;Once you’ve copied the home layout file from your theme to your project, you’ll want to edit it so that it contains only what you want to display on the homepage. Mine looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jekyll&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

  {% include head.html %}

  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
      {% include header_home.html %}
      &amp;lt;div class=&quot;container mx-auto px-2 py-4 prose&quot;&amp;gt;
        {% include about_block.html %}
        {% include tools_block.html %}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    {% include footer.html %}
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;featured-images&quot;&gt;Featured Images&lt;/h2&gt;

&lt;p&gt;In order to get featured images working in Jekyll, you’ll need to follow these steps:&lt;/p&gt;
&lt;h3 id=&quot;add-data&quot;&gt;Add Data&lt;/h3&gt;
&lt;p&gt;The first step is to add a field to a post’s front matter if you want that post to have a featured image.
I decided to name this field &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;. Here’s an example of a post’s front matter with an image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jekyll&quot;&gt;---
id: 1108
title: Playing Around With LeNet
date: 2017-06-01T19:18:55+00:00
author: danya
layout: post
image: /assets/images/featured/lenet.png
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, in addition to adding a field to the post specifying the path of the featured image, you will also have to actually add an image file to that location.&lt;/p&gt;
&lt;h3 id=&quot;display-image&quot;&gt;Display Image&lt;/h3&gt;
&lt;p&gt;Then, you will need to edit a couple of template files.&lt;/p&gt;

&lt;p&gt;Any custom field you add to a post’s front matter will be available for use in templates. You can access the value of this new custom variable by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;post.image&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. So, you would display the image in a post by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;{{ post.image }}&quot; /&amp;gt;&lt;/code&gt; to the template that is used to generate post content.&lt;/p&gt;

&lt;p&gt;As with other instances that have required overriding a theme file, you will need to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;locate the theme directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;open $(bundle show jekyll-swiss)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;find the relevant files (&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_includes/post_block.html&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_layouts/post.html&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;make copies of them in your project (&lt;code class=&quot;highlighter-rouge&quot;&gt;my-project-root/_includes/post_block.html&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;my-project-root/_layouts/post.html&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case, I wanted to display featured images in both the posts’ excerpts in the blog feed, as well as in the post itself.&lt;/p&gt;

&lt;p&gt;To both those files, I added&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;p class=&quot;featured-image&quot;&amp;gt;
    &amp;lt;img src=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot; /&amp;gt;
  &amp;lt;/p&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;full-base-urls&quot;&gt;Full Base URLs&lt;/h3&gt;

&lt;p&gt;Don’t forget to consider whether the path of the image (which you have specified in the post’s front matter) is absolute or relative. You may decide that you want to programmatically add the site’s url and baseurl to the image path in the template, by prepending the image path in the template with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;site.url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;site.baseurl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully these tips help get you at least part of the way to migrating your site from Wordpress to Jekyll!&lt;/p&gt;</content><author><name></name></author><summary type="html">When migrating from Wordpress to Jekyll, an obvious first step is exporting your data from Wordpress. Fortunately, there is a Wordpress plugin for that. Unfortunately, some features that we take for granted in Worpress (such as featured images, and the &amp;lt;!--more--&amp;gt; tag) are not supported out-the-box by Jekyll and may require some extra fiddling.</summary></entry><entry><title type="html">Getting Started With Jekyll</title><link href="https://danyalette.com/blog/getting-started-with-jekyll" rel="alternate" type="text/html" title="Getting Started With Jekyll" /><published>2017-06-03T04:00:00-04:00</published><updated>2017-06-03T04:00:00-04:00</updated><id>https://danyalette.com/blog/getting-started-with-jekyll</id><content type="html" xml:base="https://danyalette.com/blog/getting-started-with-jekyll">&lt;p&gt;When I decided to give Jekyll a shot, for my blog do-over, the first thing I did was take a look at the &lt;a href=&quot;https://jekyllrb.com/docs/quickstart/&quot;&gt;quickstart&lt;/a&gt; in their docs. It’s a very straightforward setup but the process would have been much smoother for me if I had known a few things ahead of time.&lt;/p&gt;

&lt;!--more--&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ruby-version-management&quot; id=&quot;markdown-toc-ruby-version-management&quot;&gt;Ruby version management&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#setting-up-rbenv&quot; id=&quot;markdown-toc-setting-up-rbenv&quot;&gt;Setting up rbenv&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-jekyll&quot; id=&quot;markdown-toc-installing-jekyll&quot;&gt;Installing Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#changing-the-theme&quot; id=&quot;markdown-toc-changing-the-theme&quot;&gt;Changing the Theme&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#selection&quot; id=&quot;markdown-toc-selection&quot;&gt;Selection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#installation&quot; id=&quot;markdown-toc-installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#configuration&quot; id=&quot;markdown-toc-configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#customization&quot; id=&quot;markdown-toc-customization&quot;&gt;Customization&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scss-customization&quot; id=&quot;markdown-toc-scss-customization&quot;&gt;SCSS Customization&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#write-your-own-scss&quot; id=&quot;markdown-toc-write-your-own-scss&quot;&gt;Write Your Own SCSS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#extend-the-themes-scss&quot; id=&quot;markdown-toc-extend-the-themes-scss&quot;&gt;Extend the Theme’s SCSS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deploy&quot; id=&quot;markdown-toc-deploy&quot;&gt;Deploy&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#server-config&quot; id=&quot;markdown-toc-server-config&quot;&gt;Server Config&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#permalinks&quot; id=&quot;markdown-toc-permalinks&quot;&gt;Permalinks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#404&quot; id=&quot;markdown-toc-404&quot;&gt;404&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-_site-files&quot; id=&quot;markdown-toc-build-_site-files&quot;&gt;Build _site/ Files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#my-process&quot; id=&quot;markdown-toc-my-process&quot;&gt;My Process&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ruby-version-management&quot;&gt;Ruby version management&lt;/h2&gt;

&lt;p&gt;Before starting on the installation, you should get set up using a Ruby version management tool.&lt;/p&gt;

&lt;p&gt;If you are on a Mac, and you have recently tried to install gems, you may have noticed that you had issues with permissions; there’s a good chance you ended up doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo gem install...&lt;/code&gt;. Doing so is problematic for a few reasons. For one, this may result in you needing to use sudo every time you use one of those gems, which is cumbersome and dangerous. Also, installing gems in the version of Ruby that comes default with Mac OS can have unintended side-effects on other programs you use that depend on Ruby.&lt;/p&gt;

&lt;p&gt;The two main tools that are conventionally used to do Ruby version management are &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm&lt;/code&gt;. I chose to go with &lt;a href=&quot;https://github.com/rbenv/rbenv#homebrew-on-mac-os-x&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-rbenv&quot;&gt;Setting up rbenv&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew install rbenv
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rbenv init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After installing &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;, you need to use &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; to install at least one version of Ruby, and then tell &lt;code class=&quot;highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; which version of Ruby you want to work on at the moment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rbenv install 2.4.1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;2.4.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;installing-jekyll&quot;&gt;Installing Jekyll&lt;/h2&gt;

&lt;p&gt;Now that your Ruby install is all set, you are ready to go ahead and install Jekyll, as per the instructions in the offical docs’ quickstart:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install jekyll bundler
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll new myblog
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;span class=&quot;c&quot;&gt;# Now browse to http://localhost:4000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’ll start a development server. In order to do a production build, do&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Whenever Jekyll makes a build (either for development or for production), &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; gets emptied out and then repopulated with html and CSS files, and the resultant website is served out of that &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; directory. So, you’ll never be directly editing files in that directory.&lt;/p&gt;

&lt;h2 id=&quot;changing-the-theme&quot;&gt;Changing the Theme&lt;/h2&gt;

&lt;h3 id=&quot;selection&quot;&gt;Selection&lt;/h3&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://github.com/planetjekyll/awesome-jekyll-themes&quot;&gt;this&lt;/a&gt; list to pick one, and make note of your chosen theme’s &lt;em&gt;gem name&lt;/em&gt;.&lt;br /&gt;
E.g. This theme is called Swiss but the gem is called &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Swiss ★35 (gem: jekyll-swiss ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Installing the theme is a four-step process:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add the new theme to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, which lists the project’s dependencies:
    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Swiss theme&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-swiss&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; to update your dependencies. This command install will install the new gem.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;change the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;theme: &lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;
    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;theme: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swiss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart the development server to reload the new config and the updated dependencies:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Your chosen theme may have a few settings you can configure in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. You can determine what settings are available by reading that theme’s documentation. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss&lt;/code&gt; has several options for &lt;code class=&quot;highlighter-rouge&quot;&gt;theme_color&lt;/code&gt;. So, I’ve added the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;theme_color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After editing your config, restart your development server.&lt;/p&gt;

&lt;h3 id=&quot;customization&quot;&gt;Customization&lt;/h3&gt;

&lt;p&gt;You can navigate to the root directory of the theme by doing, e.g.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;open &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;bundle show jekyll-swiss&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(You can use this method for any installed gems.)
Don’t make changes directly to any file in the theme directory; rather, any file that you would like to alter should be copied into your project root at the same location. The file in the project will override the file in the theme.&lt;/p&gt;

&lt;p&gt;For example, if you want to change the footer, copy the file &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_includes/footer.html&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;my-project/_includes/footer.html&lt;/code&gt; and make your changes to the latter. If you are running the dev server, then you should be able simply refresh the page in the browser to see your changes take effect.&lt;/p&gt;

&lt;h2 id=&quot;scss-customization&quot;&gt;SCSS Customization&lt;/h2&gt;

&lt;p&gt;Jekyll has built-in support for writing styles in SCSS. Any SCSS files that you add to your project, anywhere &lt;em&gt;other than&lt;/em&gt; in underscored directories (&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, …), will be compiled to CSS and added to &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; with the same name and directory hierarchy they had as SCSS files.&lt;/p&gt;

&lt;p&gt;For example, these SCSS files&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;style.scss
assets/my-file.scss
testing/testeroo/test.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;will, respectively, be compiled to these CSS files:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_site/style.css
_site/assets/my-file.css
_site/testing/testeroo/test.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The same goes for the &lt;em&gt;theme’s&lt;/em&gt; SCSS files. If you navigate to your current theme’s root directory, you will notice that any SCSS in a non-underscored directory has been compiled to an equivalent CSS file, in your project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;write-your-own-scss&quot;&gt;Write Your Own SCSS&lt;/h3&gt;

&lt;p&gt;CSS is included in Jekyll sites in the same way it is in any run-of-the-mill site: the html files have &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags, who’s href attributes point to CSS files. In order to add a new stylesheet to your site, you need to do two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a SCSS file.&lt;br /&gt;
For this, I recommend that you create an &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/&lt;/code&gt; directory in your project root. The files that you add to this directory will be compiled to CSS files in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/assets/&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag.&lt;br /&gt;
For this step, you may need to delve into your theme a little bit. You will probably want to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. Now for some digging: open your theme’s directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;$ open $(bundle show jekyll-swiss)&lt;/code&gt;) and figure out which template includes a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. In my case, the template in question is in &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/_includes/head.html&lt;/code&gt;. Now, importantly, do not edit the file in the theme’s directory. What we want to do is override this file &lt;em&gt;in our project&lt;/em&gt;. So, assuming the file you want to override is in the theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;If your project root does not have an &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; directory, create one.&lt;/li&gt;
      &lt;li&gt;Copy the file from the theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; to your project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Edit the file in your project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/&lt;/code&gt; to add the new &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extend-the-themes-scss&quot;&gt;Extend the Theme’s SCSS&lt;/h3&gt;

&lt;p&gt;There are some limitation and drawbacks to simply adding another CSS file to the site. For instance, you might want access to the theme’s SCSS variables. Similarly to steps laid out above (for overriding a theme template file), here’s what you need to do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Navigate to the theme’s directory (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;$ open $(bundle show jekyll-swiss)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Find the main SCSS in the theme, and copy it into your project with the same file path it had in the theme. In my case, the theme’s main stylesheet was in &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-swiss-0.4.0/assets/style.scss&lt;/code&gt;, so I created &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/style.scss&lt;/code&gt; in my project root.
The content of this file is:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Sass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;needs&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;matter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;dashes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;enough&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;charset&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Import partials from `sass_dir` and set theme here
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;theme-{{ site.theme_color | default: &quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; }}.scss&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The default base that the Jekyll SCSS compiler uses for imported URLs points to the theme’s configured SCSS directory, so I don’t need to change anything in my copy of this file in order for that import statement to work. I can go ahead and start using the theme’s variables:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$color-primary-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;In order to deploy your site, all you need to do is run Jekyll’s build process, and then copy the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; into your server’s web root.&lt;/p&gt;

&lt;h3 id=&quot;server-config&quot;&gt;Server Config&lt;/h3&gt;

&lt;p&gt;Consider the following when setting up your server to host a Jekyll site.&lt;/p&gt;

&lt;h4 id=&quot;permalinks&quot;&gt;Permalinks&lt;/h4&gt;

&lt;p&gt;You may need to configure your production server in order to accommodate your chosen permalink structure. For example: I have set, in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;permalink: &lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/blog/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that the title is not followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt;, but the files that I would like to serve, when hitting the resulting URLs, are html files.&lt;/p&gt;

&lt;p&gt;I am using Apache, so I opted to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file in my web root, containing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-htaccess&quot;&gt;RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^([^\.]+)$ $1.html [NC,L]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;404&quot;&gt;404&lt;/h4&gt;

&lt;p&gt;You may also want to add a 404 page. You’ll have to create a template file for that page, and then configure your server to use the resultant page as your error document.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;404.md&lt;/code&gt; in your project root. Here’s what mine looks like:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
# example 404.md

layout: post
title: Not Found
date: 1970-01-01T00:00:00+00:00
permalink: /404.html
exclude_from_nav: true
---

This, ladies and gentlemen, is a 404
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;If you are using Apache, add the following to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt;:
    &lt;pre&gt;&lt;code class=&quot;language-htaccess&quot;&gt;ErrorDocument 404 /404.html
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next time you run a build, the file &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/404.html&lt;/code&gt; should be created.&lt;/p&gt;

&lt;h3 id=&quot;build-_site-files&quot;&gt;Build _site/ Files&lt;/h3&gt;

&lt;p&gt;Although running the Jekyll development server will cause Jekyll to build the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; files, you should turn off the dev server and run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; before checking in and deploying &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; files. This is because the dev server will have assigned &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt; as the value of of &lt;code class=&quot;highlighter-rouge&quot;&gt;site.url&lt;/code&gt;, and this value may be baked into various resultant html files.&lt;/p&gt;

&lt;p&gt;Also note that you might want to specify the environment when doing a production build:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production jekyll build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is because some templates may include blocks that are checking for the environment, such as&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'production'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;google_analytics&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;google-analytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;my-process&quot;&gt;My Process&lt;/h3&gt;
&lt;p&gt;I am using git for my Jekyll site. In addition, I have decided to track &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; using git, contrary to the default Jekyll behaviour, in order to be able to avoid having to do a Jekyll build on my web server (i.e. to avoid configuring my web host environment w/ correct version of Ruby and gems etc). So, for me, the process looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production jekyll build
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;my message&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh user@host
&lt;span class=&quot;gp&quot;&gt;host$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/repos/jekyll-site
&lt;span class=&quot;gp&quot;&gt;host$ &lt;/span&gt;git pull
&lt;span class=&quot;c&quot;&gt;# My web root is /var/www/html/&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;host$ &lt;/span&gt;cp -a ~/jekyll_site/_site/. /var/www/html
&lt;span class=&quot;c&quot;&gt;# Tada!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So, that should be enough info to be able to start working on your new Jekyll site!
You might also find some useful info in my post on &lt;a href=&quot;/blog/migrating-from-wordpress-to-jekyll&quot;&gt;Migrating From Wordpress to Jekyll&lt;/a&gt; - I cover some Wordpress specific topics, as well as some more general blog-related things.&lt;/p&gt;</content><author><name></name></author><summary type="html">When I decided to give Jekyll a shot, for my blog do-over, the first thing I did was take a look at the quickstart in their docs. It’s a very straightforward setup but the process would have been much smoother for me if I had known a few things ahead of time.</summary></entry><entry><title type="html">New Website and Blog!</title><link href="https://danyalette.com/blog/new-website-and-blog" rel="alternate" type="text/html" title="New Website and Blog!" /><published>2017-06-03T03:06:00-04:00</published><updated>2017-06-03T03:06:00-04:00</updated><id>https://danyalette.com/blog/new-website-and-blog</id><content type="html" xml:base="https://danyalette.com/blog/new-website-and-blog">&lt;p&gt;I finally got around to updating my personal website and blog!&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;My personal website was a quirky custom oddity with ancient demos; it wasn’t responsive, or particularly modern in terms of either aesthetics or code. The blog was a wordpress site that I’ve been making tiny iterative tweaks to for years. It was starting to feel pretty fragile. So, I decided to fix them both in one shot, using Jekyll.&lt;/p&gt;

&lt;p&gt;The main reason I chose Jekyll is because it’s a static site generator - there’s something delightfully simple about just ending up with a bunch of html files at the end of the day. As for why Jekyll and not some other static site generator: it’s stable, actively maintained, has been adopted for big and successful projects (e.g. Github Pages), and has a decent sized community. (That’s probably a pretty good checklist to look at when adopting any new technology for a project that needs to be productionable.) An extremely awesome side-effect of this choice is that it’s a file-based system so all of the blog data can be seamless tracked using git.&lt;/p&gt;

&lt;p&gt;I decided to compile some of the gotchas I encountered while getting Jekyll set up. You can check those out here: &lt;a href=&quot;/blog/getting-started-with-jekyll&quot;&gt;Getting Started With Jekyll&lt;/a&gt;. I also made a little list of tips for people who, like me, are migrating a wordpress site to Jekyll: &lt;a href=&quot;/blog/migrating-from-wordpress-to-jekyll&quot;&gt;Migrating From Wordpress To Jekyll&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I finally got around to updating my personal website and blog!</summary></entry><entry><title type="html">Playing Around With LeNet</title><link href="https://danyalette.com/blog/playing-around-with-lenet" rel="alternate" type="text/html" title="Playing Around With LeNet" /><published>2017-06-01T15:18:55-04:00</published><updated>2017-06-01T15:18:55-04:00</updated><id>https://danyalette.com/blog/playing-around-with-lenet</id><content type="html" xml:base="https://danyalette.com/blog/playing-around-with-lenet">&lt;p&gt;Just for fun, I followed along &lt;a href=&quot;http://www.pyimagesearch.com/2016/08/01/lenet-convolutional-neural-network-in-python/&quot;&gt;this&lt;/a&gt; tutorial on how to build &lt;a href=&quot;http://yann.lecun.com/exdb/lenet/&quot;&gt;LeNet&lt;/a&gt; – an early &amp;amp; famously successful neural net used for handwriting recognition – in Python. I’ve been playing with the data a bit to see how my modifications affect the learning rate. Here’s what I tried:&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rotate each image by 90deg&lt;/li&gt;
  &lt;li&gt;Rotate each image by 180deg&lt;/li&gt;
  &lt;li&gt;Rotate each image by 270deg&lt;/li&gt;
  &lt;li&gt;Invert high and low values (Note: high values are represented by white and low values are represented by black)&lt;/li&gt;
  &lt;li&gt;Fade image – reduce intensity by halving all values&lt;/li&gt;
  &lt;li&gt;Eliminate “in-between” values – all pixel values are either 1 (white) or 0 (black)&lt;/li&gt;
  &lt;li&gt;Randomly rotate each image (by either 90, 180 or 270deg)&lt;/li&gt;
  &lt;li&gt;Randomly rotate each image, after adding an indicator line to the bottom of the image&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uniform-rotation&quot;&gt;Uniform Rotation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/rotate-1.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft wp-image-1115 size-full&quot; src=&quot;/assets/images/uploads/2017/06/rotate-1-300x120.png&quot; alt=&quot;rotate-1&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/rotate-2.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft wp-image-1114 size-medium alignleft&quot; src=&quot;/assets/images/uploads/2017/06/rotate-2-300x120.png&quot; alt=&quot;rotate-2&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/rotate-3.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft wp-image-1113 size-medium alignleft&quot; src=&quot;/assets/images/uploads/2017/06/rotate-3-300x120.png&quot; alt=&quot;rotate-3&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;float: none; clear: both;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;To begin with, I rotated the images by, in turn, 90, 180, and 270 degrees.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 90deg&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rotation = 2 # 180deg&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rotation = 3 # 270deg&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rot90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At each rotation, I ran LeNet for 30 epochs. As expected, those transformations did not appear to affect learning rate, because the transformation was applied uniformly across all data. In addition, these transformations will not affect any other attributes of the data, such as mean value over the whole image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/Figure_rotations.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-1112&quot; src=&quot;/assets/images/uploads/2017/06/Figure_rotations.png&quot; alt=&quot;Figure_rotations&quot; width=&quot;640&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;valueintensity&quot;&gt;Value/Intensity&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/invert-color.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-1120&quot; src=&quot;/assets/images/uploads/2017/06/invert-color-300x120.png&quot; alt=&quot;invert-color&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/lighten-color.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-1119&quot; src=&quot;/assets/images/uploads/2017/06/lighten-color-300x120.png&quot; alt=&quot;lighten-color&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/binary-color.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-1121&quot; src=&quot;/assets/images/uploads/2017/06/binary-color-300x120.png&quot; alt=&quot;binary-color&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;float: none; clear: both;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;I then tried playing around with the values in the image.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transformData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# normal (values must, in any case, be converted from range 0-255 to range 0-1)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# return 1 - (data/255.) # invert values&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# return data/(255. * 2) # fade image - reduce intensity by halving all values&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# return data &amp;amp;gt; 127.5 # make values binary&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trainLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_test_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transformData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;astype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As in the case of uniform rotation across all data, these changes were applied uniformly to all data. So, we wouldn’t expect these alterations to have a substantial negative impact on the ability of the network to eventually converge. However, these alteration will have changed important underlying structures of the data such as the mean and variance of the values in any given image. To illustrate, applying these value/intensity transformations to one set of 5 randomly chosen images results in the following:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;normal
------
&lt;/span&gt;mean: 0.119206682497
variance: 0.0883226659517

&lt;span class=&quot;gh&quot;&gt;binary
------
&lt;/span&gt;mean: 0.123979591837
variance: 0.108608652645

&lt;span class=&quot;gh&quot;&gt;fade
----
&lt;/span&gt;mean: 0.0596033412487
variance: 0.0220806664879

&lt;span class=&quot;gh&quot;&gt;invert
------
&lt;/span&gt;mean: 0.880793317503
variance: 0.0883226659517
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see below, the binary color and inverted color images get off to a slower start but soon catch up, after 5 epochs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/Figure_values_5e.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-1136&quot; src=&quot;/assets/images/uploads/2017/06/Figure_values_5e.png&quot; alt=&quot;Figure_values_5e&quot; width=&quot;640&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  (Note that I am comparing individual runs of LeNet; the difference between these learning rates is small enough that it might be reasonable to expect that these observed differences are random occurrences and would disappear when comparing the averages of multiple runs.)
&lt;/div&gt;

&lt;div style=&quot;float: none; clear: both;&quot;&gt;
  &amp;nbsp;
&lt;/div&gt;

&lt;p&gt;The faded image, however, also gets off to a slow start but takes many more epochs to catch up.&lt;/p&gt;

&lt;div style=&quot;float: none; clear: both;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/Figure_values_30e.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-1135&quot; src=&quot;/assets/images/uploads/2017/06/Figure_values_30e.png&quot; alt=&quot;Figure_values_30e&quot; width=&quot;640&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;float: none; clear: both;&quot;&gt;
&lt;/div&gt;

&lt;h2 id=&quot;random-rotation&quot;&gt;Random Rotation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/random-rotate.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-1117&quot; src=&quot;/assets/images/uploads/2017/06/random-rotate-300x120.png&quot; alt=&quot;random-rotate&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/random-rotate-with-indicators.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignleft size-medium wp-image-1116&quot; src=&quot;/assets/images/uploads/2017/06/random-rotate-with-indicators-300x120.png&quot; alt=&quot;random-rotate-with-indicators&quot; width=&quot;300&quot; height=&quot;120&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;float: none; clear: both;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Finally, I randomly rotated the images, both with and without the addition of an “indicator” line (a line of all 1s – pure white – added to the bottom of the image before applying the random rotation, to serve as an indicator of the “true” bottom of the image:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;indicator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# data[i][27] = indicator.tolist() # add indicator&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rot90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unsurprisingly, the worst performance of all the data modifications occurred as a result of randomly rotating the images. In this case, the transformation was not uniformly applied to each image. The addition of the indicator line had a substantial positive impact on the learning rate. However, interestingly, this positive effect was only observed after 5 epochs. Even so, neither modification was able to eventually converge to an accuracy similar to unmodified data, after 30 epochs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/uploads/2017/06/Figure_random_rotate.png&quot; rel=&quot;magnific&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-1111&quot; src=&quot;/assets/images/uploads/2017/06/Figure_random_rotate.png&quot; alt=&quot;Figure_random_rotate&quot; width=&quot;640&quot; height=&quot;480&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>danya</name></author><summary type="html">Just for fun, I followed along this tutorial on how to build LeNet – an early &amp;amp; famously successful neural net used for handwriting recognition – in Python. I’ve been playing with the data a bit to see how my modifications affect the learning rate. Here’s what I tried:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://danyalette.com/assets/images/featured/lenet.png" /></entry><entry><title type="html">Pixel Value Visualization</title><link href="https://danyalette.com/blog/pixel-value-visualization" rel="alternate" type="text/html" title="Pixel Value Visualization" /><published>2017-04-21T22:23:33-04:00</published><updated>2017-04-21T22:23:33-04:00</updated><id>https://danyalette.com/blog/pixel-value-visualization</id><content type="html" xml:base="https://danyalette.com/blog/pixel-value-visualization">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/danyalette/pixel-value-visualizer&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://pixel-value.danya.ca&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I’m currently doing a machine learning course and spending…slightly more time than usual contemplating high-dimensional data.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;It’s conventional to think of images as having two dimensions. However, at least for the purposes of machine learning, they have two spatial dimensions and any number of others (including, most obviously, color).&lt;/p&gt;

&lt;p&gt;Color may itself have several dimensions in order to account for different color channels (e.g. red, green, and blue). Or, color may contribute just one additional dimension, in the case of greyscale images.&lt;/p&gt;

&lt;p&gt;For fun, I made &lt;a href=&quot;http://pixel-value.danya.ca&quot; target=&quot;_blank&quot;&gt;a site&lt;/a&gt; that helps to visualize the color dimension by tacking on a third spatial dimension to the image. Drag the images the see the flip-side.&lt;/p&gt;</content><author><name>danya</name></author><summary type="html">github website</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://danyalette.com/assets/images/featured/pixel-value.gif" /></entry><entry><title type="html">ThreeJS Terraforming Tool</title><link href="https://danyalette.com/blog/threejs-terraforming-tool" rel="alternate" type="text/html" title="ThreeJS Terraforming Tool" /><published>2017-03-16T14:23:51-04:00</published><updated>2017-03-16T14:23:51-04:00</updated><id>https://danyalette.com/blog/threejs-terraforming-tool</id><content type="html" xml:base="https://danyalette.com/blog/threejs-terraforming-tool">&lt;p&gt;So, somewhat accidentally, I made a terraforming tool in threejs! Check it out:
&lt;!--more--&gt;
Basically, when you mouse over, a raycaster is set from the camera position and the mouse position. The raycaster returns the face of the plane that it has intersected. The position of each vertex of the face is incremented by 0.5 on the z axis. Then, the plane geometry is updated (as are the face normals and vertex normals, in order to maintain the smooth appearance).
&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/danyalette/xpynzxpo/13/embed/result,js,css/&quot;&gt;&amp;lt;/script
&amp;lt;/p&amp;gt;&lt;/script&gt;&lt;/p&gt;</content><author><name>danya</name></author><summary type="html">So, somewhat accidentally, I made a terraforming tool in threejs! Check it out: Basically, when you mouse over, a raycaster is set from the camera position and the mouse position. The raycaster returns the face of the plane that it has intersected. The position of each vertex of the face is incremented by 0.5 on the z axis. Then, the plane geometry is updated (as are the face normals and vertex normals, in order to maintain the smooth appearance).</summary></entry><entry><title type="html">ThreeJS Rhombic Dodecahedron</title><link href="https://danyalette.com/blog/threejs-rhombic-dodecahedron" rel="alternate" type="text/html" title="ThreeJS Rhombic Dodecahedron" /><published>2017-03-15T18:04:04-04:00</published><updated>2017-03-15T18:04:04-04:00</updated><id>https://danyalette.com/blog/threejs-rhombic-dodecahedron</id><content type="html" xml:base="https://danyalette.com/blog/threejs-rhombic-dodecahedron">&lt;p&gt;I’ve been working with threejs a bunch lately. Here’s a pretty shiny tessellation of a space-filling polyhedron called the rhombic dodecahedron:
&lt;!--more--&gt;
&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/danyalette/jbm2b9bo/2/embed/result,js/&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content><author><name>danya</name></author><summary type="html">I’ve been working with threejs a bunch lately. Here’s a pretty shiny tessellation of a space-filling polyhedron called the rhombic dodecahedron:</summary></entry><entry><title type="html">Building Themeable Web Apps</title><link href="https://danyalette.com/blog/building-themeable-web-apps" rel="alternate" type="text/html" title="Building Themeable Web Apps" /><published>2017-02-20T11:35:46-05:00</published><updated>2017-02-20T11:35:46-05:00</updated><id>https://danyalette.com/blog/building-themeable-web-apps</id><content type="html" xml:base="https://danyalette.com/blog/building-themeable-web-apps">&lt;p&gt;I recently worked on an app that was intended to be themeable – a “white label” app that had a default look and default behaviour which were expected to be selectively overridden on a client-by-client basis. I definitely did not grasp the scope of this requirement before diving in. So, I figured I would share some of my experiences in case they can save anyone else some time.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;flexibility-vs-predictability&quot;&gt;Flexibility vs. Predictability&lt;/h3&gt;

&lt;p&gt;Looking back, the biggest issues we had revolved around striking a balance between flexibility and predictability. To illustrate how theming can be closer to one extreme or the other, consider the following options for stylesheet customization:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client can &lt;em&gt;overwrite&lt;/em&gt; the default stylesheets&lt;/li&gt;
  &lt;li&gt;The client can &lt;em&gt;override&lt;/em&gt; the default styles (using css rule order and selector specificity), by including additional stylesheets after the default ones&lt;/li&gt;
  &lt;li&gt;The client can only set the values of certain parameters that have been predetermined, such as button colours&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the first case, the app is extremely flexible but extremely unpredictable. This will make it impossible for you, the devs, to test all scenarios, and to write other parts of the app (such as the markup) in such a way that the app will reliably produce the intended result.&lt;/p&gt;

&lt;p&gt;However, the last case isn’t ideal either – this can only work if there is consensus (between the clients, product managers, the dev team, etc) on what the outline of your product looks like, in all its possible forms. This can also create a lot overhead: every time someone wants a new option, you have to create a new parameter and hook it into your existing app …and then be able to potentially deploy the updated app to other clients who may or may not care to set the value of the new parameter…and then you have to update documentation, and so on.&lt;/p&gt;

&lt;p&gt;I have no intention of advising you to favour of one strategy or another; the right choice obviously depends on the circumstances. In our case, when it came to stylesheets (written in scss), we used a combination strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Theme files were included by default (i.e. the default stylesheets had, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;include('theme.scss')&lt;/code&gt;) and the theme files existed as empty files in the default build.&lt;/li&gt;
  &lt;li&gt;Clients could include their own theme files to &lt;em&gt;overwrite&lt;/em&gt; the existing (empty) theme files.&lt;/li&gt;
  &lt;li&gt;Some of those theme files were explicitly intended for scss variables. In other words, scss variables that had been set in the default scss stylesheets could be overridden in the (default empty) theme variables files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might have noticed that our method includes parts of all three options enumerated above: files can be &lt;em&gt;overwritten&lt;/em&gt; (though, in this case, not important ones!); those theme files can &lt;em&gt;override&lt;/em&gt; existing styles (using css rule order and selector specificity). And, in addition, certain parameters have been earmarked for client customization by the fact that some css properties have been set using scss variables rather than directly having been assigned a value. The message being: you don’t have to choose between flexibility and predictability, but you will definitely have to consider where you want to land, in the gradient between the two. This will likely involve having to define, with the participation of the app’s other stakeholders, a clear idea of what your app should and should not &lt;em&gt;be able to become&lt;/em&gt; as a result of theming.&lt;/p&gt;

&lt;p&gt;When it came to stylesheets, this method worked well for us but it wasn’t our master plan – we grew into it organically as our product requirements evolved. However, in addition to stylesheets, we also had to contend with themeable layouts, data, and basic functionality, all of which were also constantly also negotiating that balance between flexibility and predictability.&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;A downside of the organic evolution of our strategy was that it was quite varied. Ok, it was basically strategy soup. In some cases, customizations were set in a configuration file that was bundled into the client build of the app. In other cases, they were set in a configuration file that was fetched remotely by the app at runtime.  Some configurations were directly written into app files at build-time using search-and-replace. In other cases, customizations were additional files that sometimes overwrote and sometimes overrode existing default files (as was the case in the stylesheets example above).&lt;/p&gt;

&lt;p&gt;Taken individually, each strategy was justified. For instance, if a client wanted to be able to make changes to certain aspects of the app without redeploying a build, then it seems obvious that we needed a configuration file stored remotely that could be changed at will, and that the app would fetch at runtime. However, other configurations needed to be set at build time. In our case, since it was a Cordova hybrid mobile app, the title of the app and its icon, for instance, needed to be set at build time.&lt;/p&gt;

&lt;p&gt;But it is easy to see how this variety might hamper development. Developers working on the app were unclear on which method to use when building out new customizable features; this slowed down development and made our codebase messier and more difficult to maintain. The biggest issue, however, is only evident to me in retrospect: as our theming strategy became increasingly complex, so did our build process. At a certain point, our build process was responsible for (in addition to the usual suspects): copying all files from directory &lt;em&gt;a&lt;/em&gt; into &lt;em&gt;b&lt;/em&gt;, without overwriting; copying all files from directory &lt;em&gt;c&lt;/em&gt; to directory &lt;em&gt;d&lt;/em&gt;, &lt;em&gt;with&lt;/em&gt; overwriting; emptying this dir; duplicating file &lt;em&gt;q&lt;/em&gt;, but appending a string from file &lt;em&gt;z&lt;/em&gt; to the name of file &lt;em&gt;q&lt;/em&gt;; generating a json file from an xml file; replacing string &lt;em&gt;x&lt;/em&gt; in all files in directory &lt;em&gt;e&lt;/em&gt; with string _y…_which was itself the string returned from a shell command…and the list goes on. Just writing this out, I’m sweating.&lt;/p&gt;

&lt;p&gt;Perhaps unsurprisingly, our build process was extremely unreliable because there were several race conditions. Many of the tasks were asynchronous (sometimes unintentionally so!), and had dependencies on other tasks. (For example, imagine that string &lt;em&gt;x _is to be read from file _z&lt;/em&gt;, but file &lt;em&gt;z&lt;/em&gt; is in directory &lt;em&gt;c&lt;/em&gt;, which is to be emptied after it has been copied into directory &lt;em&gt;d&lt;/em&gt; . The success of the reading task depends on the amount of time it takes to complete the copying task.) Because the build process was built up incrementally, some of the dependencies were exceedingly subtle; I actually even found some circular dependencies!&lt;/p&gt;

&lt;p&gt;Anyways, if this story does have a moral, I think it is this:&lt;/p&gt;

&lt;p&gt;It might be tempting to approach theming issues one-by-one, and implement solutions as they befit the problem. It makes complete sense to set up theming to work differently for stylesheets than it works for copy, or markup files. However, themeability isn’t just an abstract problem – it needs to be implemented. Every time you opt to overwrite a default file with a custom one, you are adding one more thing to your build process’s plate. And every time you opt to use regex to replace a string in a default file with a string from another default file, or from a shell command…well, actually, please just don’t do that. Seriously. What are you thinking.&lt;/p&gt;

&lt;h3 id=&quot;thecube&quot;&gt;The Cube&lt;/h3&gt;

&lt;p&gt;One of my big projects, during my time working on this app, was an overhaul of the build process. The first thing I did was take a survey of all the things the build process had to accomplish, many of which were directly related to themeability. I found it helpful to categorize the various theming strategies along 3 axes: &lt;strong&gt;build-time&lt;/strong&gt; or &lt;strong&gt;runtime;&lt;/strong&gt; &lt;strong&gt;overriding&lt;/strong&gt; or &lt;strong&gt;overwriting_;_&lt;/strong&gt; &lt;strong&gt;optional&lt;/strong&gt; or &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;wp-image-1037 size-medium aligncenter&quot; src=&quot;/assets/images/uploads/2017/02/the-cube-of-themeability-285x300.jpg&quot; alt=&quot;the-cube-of-themeability&quot; width=&quot;285&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically, we ran the gamut: we had required built-time overwrites, optional runtime overrides, and everything in between. There are eight “quadrants” (octants?)  in that diagram, and you can expect that each of them will have different implications for the structure of your build process, your development workflow, your testing strategy, your deployment strategy, and so on. However, they also each have the potential to solve for different problems.&lt;/p&gt;

&lt;h5 id=&quot;build-timeruntime&quot;&gt;Build-time/runtime&lt;/h5&gt;

&lt;p&gt;A build-time configuration is one that is “baked into” the app when it is bundled for deployment. A runtime configuration, however, is one that is queried by the app during its operation. Choosing between the two – in my opinion – really depends upon use-case. In the first case, you might imagine your build process replacing the file &lt;code class=&quot;highlighter-rouge&quot;&gt;images/logo.jpg&lt;/code&gt; with the file, if any, that is found at &lt;code class=&quot;highlighter-rouge&quot;&gt;theme/images/logo.png&lt;/code&gt;. In the second case, however, you might imagine doing something like:&lt;/p&gt;

&lt;pre&gt;var logoImageFile = configurations.getParam('logo_image_file') || 'images/logo.png';&lt;/pre&gt;

&lt;p&gt;Runtime configurations are somewhat more flexible, and can be changed at arbitrary times (i.e. not just at build time), although they can also, in some cases, incur a performance penalty.&lt;/p&gt;

&lt;h5 id=&quot;overwritingoverriding&quot;&gt;Overwriting/overriding&lt;/h5&gt;

&lt;p&gt;When it comes to choosing between overriding and overwriting, I am a strong proponent of going with overriding in all cases where that is an option. Allowing clients to overwrite default files is a liability. In addition – and I can’t stress this enough – it can also create &lt;em&gt;mountains of work&lt;/em&gt; and sneaky regressions in cases where the default files (those that are slated to be overwritten by theme files) have been themselves been updated in subsequent iterations. The theme files – the ones that are intended to overwrite the defaults – would likely all need to be updated at the same time as the defaults. However, there &lt;em&gt;are&lt;/em&gt; cases where overwriting is a requirement; we encountered many such cases in using Cordova.&lt;/p&gt;

&lt;h5 id=&quot;optionalrequired&quot;&gt;Optional/required&lt;/h5&gt;

&lt;p&gt;I feel similarly about the choice between optional and required. Required customizations (e.g. a required theme file, or a required value in a configuration file) introduce unnecessary liabilities. Setting robust defaults should negate the need for required customizations, and thus reduce the probably of making buggy builds.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In any case, I strongly recommend choosing one quadrant and focussing as much of your theming strategy there – doing so will likely eliminate a lot of the excessive complexity that we struggled to rein in. I have to choose one: I believe that runtime optional overrides are the least likely to cause problems down the line.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;there are more ways to implement theming than you think!&lt;/li&gt;
  &lt;li&gt;you may end up using all of them&lt;/li&gt;
  &lt;li&gt;but try not to&lt;/li&gt;
&lt;/ul&gt;</content><author><name>danya</name></author><summary type="html">I recently worked on an app that was intended to be themeable – a “white label” app that had a default look and default behaviour which were expected to be selectively overridden on a client-by-client basis. I definitely did not grasp the scope of this requirement before diving in. So, I figured I would share some of my experiences in case they can save anyone else some time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://danyalette.com/assets/images/featured/the-cube-of-themeability-wide.png" /></entry><entry><title type="html">Pure Scss Slideshow</title><link href="https://danyalette.com/blog/pure-scss-slideshow" rel="alternate" type="text/html" title="Pure Scss Slideshow" /><published>2017-02-18T20:40:50-05:00</published><updated>2017-02-18T20:40:50-05:00</updated><id>https://danyalette.com/blog/pure-scss-slideshow</id><content type="html" xml:base="https://danyalette.com/blog/pure-scss-slideshow">&lt;p&gt;The performance of this snippet is not great in chrome, but nonetheless…&lt;/p&gt;

&lt;p&gt;Here you go!&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://gist.github.com/danyalette/0c32184b9a86a31e061c785e114f2528&quot; target=&quot;_blank&quot;&gt;gist&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://codepen.io/danyalette/pen/RKmXGQ&quot; target=&quot;_blank&quot;&gt;codepen&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/images/fun.jpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/images/yay.jpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;/images/wow.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$slide_duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//preload images
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('')&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$images&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;slideshow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$current_percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@each&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$images&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$current_percentage&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url($image)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$current_percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$current_percentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.slideshow-image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slideshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation-timing-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation-fill-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forwards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$slide_duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>danya</name></author><summary type="html">The performance of this snippet is not great in chrome, but nonetheless…</summary></entry><entry><title type="html">Old Sites</title><link href="https://danyalette.com/blog/old-sites" rel="alternate" type="text/html" title="Old Sites" /><published>2016-11-03T19:23:09-04:00</published><updated>2016-11-03T19:23:09-04:00</updated><id>https://danyalette.com/blog/old-sites</id><content type="html" xml:base="https://danyalette.com/blog/old-sites">&lt;p&gt;i’m redoing my personal website and feeling super nostalgic for my websites of yore.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;first-site&quot;&gt;first site&lt;/h2&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; style=&quot;max-width:95%;&quot;&gt;&lt;source src=&quot;/assets/images/uploads/2016/11/first-site-b.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;

&lt;h2 id=&quot;second-site&quot;&gt;second site&lt;/h2&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; style=&quot;max-width:95%&quot;&gt;&lt;source src=&quot;/assets/images/uploads/2016/11/second-site.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;

&lt;h2 id=&quot;third-site--current&quot;&gt;third site – current&lt;/h2&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; style=&quot;max-width:95%&quot;&gt;&lt;source src=&quot;/assets/images/uploads/2016/11/third-site-b.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;/video&gt;

&lt;h3 id=&quot;fourth-site&quot;&gt;fourth site&lt;/h3&gt;

&lt;p&gt;who knows???&lt;/p&gt;</content><author><name>danya</name></author><summary type="html">i’m redoing my personal website and feeling super nostalgic for my websites of yore. first site</summary></entry></feed>